#!/usr/bin/env bash
# Lean compiler
#
# A simple wrapper around a C++ compiler. Defaults to the compiler Lean was built with,
# which can be overridden with the environment variable `LEAN_CXX`. All parameters are passed
# as-is to the wrapped compiler. Note that we use a C++ compiler purely for linking against
# the C++ standard library Lean depends on, all input files are treated as C code.
#
# Interesting options:
# * `-U LEAN_MULTI_THREAD` can be used to optimize programs not making use of multi-threading

set -e
bindir=$(dirname $0)

# NOTE: libleancpp and libInit are cyclically dependent
linker_flags="-lleancpp -lInit -lleancpp -lInit"
for arg in "$@"; do
    [[ $arg == "-shared" ]] && linker_flags="@LEANC_SHARED_LINKER_FLAGS@"
done

# Check C++ compiler
for cxx in $LEAN_CXX @CMAKE_CXX_COMPILER@ g++; do
    if [ -f $cxx ] || command -v $cxx; then
        export LEAN_CXX=$cxx && break
    fi
done
[ -f $LEAN_CXX ] || command -v $LEAN_CXX || error "no suitable C++ compiler found!"

# Note the `-x c` for treating all input as C code
@CMAKE_CXX_COMPILER_LAUNCHER@ $LEAN_CXX -D LEAN_MULTI_THREAD "-I$bindir/../include" -x c "$@" -x none "-L$bindir/../lib/lean" $linker_flags -lgmp @LEANC_EXTRA_FLAGS@ -Wno-unused-command-line-argument
