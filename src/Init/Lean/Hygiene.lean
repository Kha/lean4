/-
Copyright (c) 2019 Microsoft Corporation. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Sebastian Ullrich
-/
prelude
import Init.Control
import Init.Lean.Syntax

namespace Lean

abbrev MacroScope := Nat

/-- A monad that supports syntax quotations. -/
class MonadQuotation (m : Type → Type) :=
-- Get the fresh scope of the current macro invocation
(getCurrMacroScope {} : m MacroScope)
-- Execute action in a new macro invocation context
(withFreshMacroScope {α : Type} : m α → m α)
export MonadQuotation

def addMacroScope (n : Name) (scp : MacroScope) : Name :=
-- TODO: try harder to avoid clashes with other autogenerated names
mkNameNum n scp

/-- Simplistic MonadQuotation that does not guarantee globally fresh names. It is only safe
    if the syntax quotations do not introduce bindings around antiquotations, and
    if references to globals are prefixed with `_root_.`. -/
abbrev Unhygienic := ReaderT (List Nat) $ StateM Nat
namespace Unhygienic
instance MonadQuotation : MonadQuotation Unhygienic := {
  getCurrMacroScope := do
    stack ← read;
    pure stack.head!,
  withFreshMacroScope := fun α x => do
    fresh ← modifyGet (fun n => (n, n + 1));
    adaptReader (fun stack => fresh::stack) x
}
protected def run {α : Type} (x : Unhygienic α) : α := run x [0] 1
end Unhygienic

end Lean
